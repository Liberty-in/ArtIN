# -*- coding: utf-8 -*-
"""loader_datasets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oG2ofKCCzU1RkEsdeC4wsNKpm0JWj3B7
"""

import torch
import torchvision
import torchvision.transforms as transforms

def load_dataset():
    transform = transforms.Compose(
      [transforms.ToTensor(),
      transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

    batch_size = get_batch_size()

    trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)#dataset loads with dick or reference,can be transform

    testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
    testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)
    return (trainloader, testloader)

def get_class():
    classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
    return classes
def get_batch_size():
  batch_size = 4
  return batch_size

import matplotlib.pyplot as plt
import numpy as np


def imshow(img):
    img = img / 2 + 0.5
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()

def show_random(trainloader):

  dataiter = iter(trainloader)
  images, labels = next(dataiter)
  classes = get_class()

  imshow(torchvision.utils.make_grid(images))

  print(' '.join(f'{classes[labels[j]]:5s}' for j in range(get_batch_size())))